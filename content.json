{"meta":{"title":"怒涛卷霜雪  天堑无涯","subtitle":"","description":"test description","author":"吴涛","url":"http://breadwinners.top","root":"/"},"pages":[{"title":"Page","date":"2013-12-26T14:52:56.000Z","updated":"2023-04-30T06:59:49.463Z","comments":true,"path":"page/index.html","permalink":"http://breadwinners.top/page/index.html","excerpt":"","text":"This is a page test."},{"title":"所有标签","date":"2023-04-30T08:10:36.359Z","updated":"2023-04-30T08:10:36.359Z","comments":true,"path":"tags/index.html","permalink":"http://breadwinners.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-30T08:10:03.888Z","updated":"2023-04-30T08:10:03.888Z","comments":true,"path":"about/index.html","permalink":"http://breadwinners.top/about/index.html","excerpt":"","text":"一名小小大学生的小博客"},{"title":"我的朋友们","date":"2023-04-30T08:10:52.817Z","updated":"2023-04-30T08:10:52.817Z","comments":true,"path":"friends/index.html","permalink":"http://breadwinners.top/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有分类","date":"2023-04-30T08:10:22.183Z","updated":"2023-04-30T08:10:22.183Z","comments":true,"path":"categories/index.html","permalink":"http://breadwinners.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"maven带依赖打包","slug":"maven带依赖打包","date":"2023-05-31T16:00:00.000Z","updated":"2023-06-12T01:59:20.628Z","comments":true,"path":"2023/06/01/maven带依赖打包/","link":"","permalink":"http://breadwinners.top/2023/06/01/maven%E5%B8%A6%E4%BE%9D%E8%B5%96%E6%89%93%E5%8C%85/","excerpt":"","text":"当你需要在某个环境下使用 java -jar xxx.jar的命令运行jar包程序，而且该jar包又需要引用其他程序依赖的时候，就可以采用以下的方法。 添加依赖 12345678910111213141516171819&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.5&lt;/version&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.xxx.xxx.xxx&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 3. 运行生成的带依赖的jar就行了 java -jar ...","categories":[{"name":"小技巧","slug":"小技巧","permalink":"http://breadwinners.top/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://breadwinners.top/tags/maven/"},{"name":"打包依赖","slug":"打包依赖","permalink":"http://breadwinners.top/tags/%E6%89%93%E5%8C%85%E4%BE%9D%E8%B5%96/"}]},{"title":"flume 运行时报NoSuchMethodError com.google.common.base.Preconditions.checkArgument","slug":"flume 运行时报NoSuchMethodError","date":"2023-05-25T16:00:00.000Z","updated":"2023-06-28T14:55:13.349Z","comments":true,"path":"2023/05/26/flume 运行时报NoSuchMethodError/","link":"","permalink":"http://breadwinners.top/2023/05/26/flume%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8A%A5NoSuchMethodError/","excerpt":"","text":"1、遇到问题今天在配置好flume，在运行flume时报了以下错误。 12023-05-26 16:39:56,359 (SinkRunner-PollingRunner-DefaultSinkProcessor) [ERROR - org.apache.flume.sink.hdfs.HDFSEventSink.process(HDFSEventSink.java:459)] process failedjava.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V at org.apache.hadoop.conf.Configuration.set(Configuration.java:1357) at org.apache.hadoop.conf.Configuration.set(Configuration.java:1338) at org.apache.hadoop.conf.Configuration.setBoolean(Configuration.java:1679) at org.apache.flume.sink.hdfs.BucketWriter.open(BucketWriter.java:221) at org.apache.flume.sink.hdfs.BucketWriter.append(BucketWriter.java:572) at org.apache.flume.sink.hdfs.HDFSEventSink.process(HDFSEventSink.java:412) at org.apache.flume.sink.DefaultSinkProcessor.process(DefaultSinkProcessor.java:67) at org.apache.flume.SinkRunner$PollingRunner.run(SinkRunner.java:145) at java.lang.Thread.run(Thread.java:748)Exception in thread &quot;SinkRunner-PollingRunner-DefaultSinkProcessor&quot; java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V at org.apache.hadoop.conf.Configuration.set(Configuration.java:1357) at org.apache.hadoop.conf.Configuration.set(Configuration.java:1338) at org.apache.hadoop.conf.Configuration.setBoolean(Configuration.java:1679) at org.apache.flume.sink.hdfs.BucketWriter.open(BucketWriter.java:221) at org.apache.flume.sink.hdfs.BucketWriter.append(BucketWriter.java:572) at org.apache.flume.sink.hdfs.HDFSEventSink.process(HDFSEventSink.java:412) at org.apache.flume.sink.DefaultSinkProcessor.process(DefaultSinkProcessor.java:67) at org.apache.flume.SinkRunner$PollingRunner.run(SinkRunner.java:145) at java.lang.Thread.run(Thread.java:748) 2、解决问题 遇到这种问题，无非两种情况，一是 丢失jar包，二是 jar包冲突。 由于对hadoop以及flume版本选择比较随意。猜测是jar包存在冲突。找到报错的类 com.google.common.base.Preconditions ，通过查询 该类存在 guava jar包中。flume的lib中 &#x2F;opt&#x2F;flume&#x2F;apache-flume-1.9.0-bin&#x2F;lib （guava-11.0.2.jar）而 hadoop 的 lib 中 &#x2F;opt&#x2F;hadoop&#x2F;hadoop-3.2.1&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F; （guava-27.0-jre.jar），删除版本低的，并拷贝高版本的。 问题解决。 Google Guava","categories":[{"name":"大数据","slug":"大数据","permalink":"http://breadwinners.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"flume","slug":"flume","permalink":"http://breadwinners.top/tags/flume/"}]},{"title":"Linux中的各种bin目录","slug":"Linux中的各种bin目录","date":"2023-05-24T16:00:00.000Z","updated":"2023-05-31T11:16:43.747Z","comments":true,"path":"2023/05/25/Linux中的各种bin目录/","link":"","permalink":"http://breadwinners.top/2023/05/25/Linux%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8Dbin%E7%9B%AE%E5%BD%95/","excerpt":"","text":"usr实际上是Unix System Resource /usr/bin系统预装的一些可执行程序，随系统升级会改变 /usr/local/bin用户安装的可执行程序，不受系统升级影响，用户编译安装软件时，一般放到&#x2F;usr&#x2F;local目录下 如果两个目录下有相同的可执行程序，谁优先执行会受到PATH环境变量的影响，举个栗子：echo $PATH查看当前 PATH 环境变量/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.local/bin:/root/bin:/usr/local/src/nodejs/bin:/usr/local/git/bin:/usr/bin/git/bin这里/usr/local/git/bin优先于 /usr/bin/git/bin /bin 存放所有用户皆可用的系统程序，系统启动或者系统修复时可用（在没有挂载 &#x2F;usr 目录时就可以使用） /sbin 存放超级用户才能使用的系统程序 /usr/bin 存放所有用户都可用的应用程序 /usr/sbin 存放超级用户才能使用的应用程序 /usr/local/bin 存放所有用户都可用的与本地机器无关的程序 /usr/local/sbin 存放超级用户才能使用的与本地机器无关的程序 Linux中的某些重要的目录： •主目录：/root、/home/username •用户可执行文件：/bin、/usr/bin、/usr/local/bin •系统可执行文件：/sbin、/usr/sbin、/usr/local/sbin •其他挂载点：/media、/mnt •配置：/etc •临时文件：/tmp •内核和Bootloader：/boot •服务器数据：/var、/srv •系统信息：/proc、/sys •共享库：/lib、/usr/lib、/usr/local/lib","categories":[{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"}],"tags":[{"name":"bin目录","slug":"bin目录","permalink":"http://breadwinners.top/tags/bin%E7%9B%AE%E5%BD%95/"}]},{"title":".bashrc和profile和profile.d与配置环境变量","slug":"profile和.bashrc和profile.d","date":"2023-05-24T16:00:00.000Z","updated":"2023-05-31T10:56:30.566Z","comments":true,"path":"2023/05/25/profile和.bashrc和profile.d/","link":"","permalink":"http://breadwinners.top/2023/05/25/profile%E5%92%8C.bashrc%E5%92%8Cprofile.d/","excerpt":"","text":".bashrc 文件详解位置： 系统级的位于/etc/bashrc，对所有用户生效。 用户级的位于~/.bashrc或者/home/用户名/.bashrc，仅对当前用户生效。 作用： bash 提示符允许你自定义你的终端，并让它在你运行命令时显示提示。自定义的 bash 提示符着实能提高你在终端的工作效率。 给命令起别名： 1alias catt=&quot;cat -n&quot; 使多个命令可以组合使用 1234md () &#123;mkdir -p $1cd $1&#125; 变动 bashrc 是非常直接且低风险的。即使你一不小心全搞砸了，你也可以随时删掉 bashrc 文件然后重新来一遍。 profile位置： 系统级的位于/etc/profile，用于设置系统级的环境变量和启动程序，在这个文件下配置会对所有用户生效。 用户级的位于~/.bash_profile，用于设置用户级的环境变量和启动程序，在这个文件下配置会对单个用户生效。 当用户登录（login）时，文件会被执行，并从/etc/profile.d目录的配置文件中查找shell设置。 在profile中设置环境变量一般不建议在**/etc/profile**文件中添加环境变量，因为在这个文件中添加的设置会对所有用户起作用。 一般在/etc/profile.d中添加环境变量 /etc/profile.d/比/etc/profile好维护，不想要什么变量直接删除/etc/profile.d/下对应的shell脚本即可，不用像/etc/profile需要改动此文件 当添加环境变量时，我们可以按以下方式添加： 1234567891011下面以jdk的安装为例vim /etc/profile.d/java.sh在新的java.sh中输入以下内容：#set java environmentJAVA_HOME=/opt/module/jdk1.8.0_212PATH=＄JAVA_HOME/bin:＄PATHexport JAVA_HOME PATH 12345#JAVA_HOME是一个环境变量，用于指定Java的安装目录export JAVA_HOME=/opt/module/jdk1.8.0_212是一个命令，用于设置JAVA_HOME的值为/opt/module/jdk1.8.0_212，也就是Java的安装目录export PATH=$PATH:$JAVA_HOME/bin是一个命令，用于将$JAVA_HOME/bin添加到PATH环境变量中，这样就可以在任何目录下执行Java的可执行程序，如java和javac 添加时，可以在行尾使用;号，也可以不使用。 一个变量名可以对应多个变量值，多个变量值需要使用:进行分隔。 添加环境变量后，需要重新登录才能生效，也可以使用 source 命令刷新立即生效： 1source /etc/profile 查看是否生效可以使用 echo 命令： 12echo $JAVA_HOME/opt/module/jdk1.8.0_212 差异/etc/profile，/etc/bashrc 是系统全局环境变量设定； ~/.profile，~/.bashrc用户家目录下的私有环境变量设定。 当登入系统时候获得一个 shell 进程时，其读取环境设定档如下： 首先读入全局环境变量设定档/etc/profile，然后根据其内容读取额外的设定的文档，如/etc/profile.d和/etc/inputrc； 根据不同使用者帐号，于其家目录内读取~/.bash_profile； 读取失败则会读取~/.bash_login； 再次失败则读取~/.profile（这三个文档设定基本上无差别，仅读取上有优先关系）； 最后，根据用户帐号读取~/.bashrc。 至于~/.profile与~/.bashrc都具有个性化定制功能，但~/.profile可以设定本用户专有的路径、环境变量等，它只能登入的时候执行一次。 ~/.bashrc也是某用户专有设定文档，可以设定路径、命令别名，每次 shell script 的执行都会使用它一次。 设置程序为任意目录可以执行 可以像上文配置java环境变量一样配置 在/usr/bin或者~/bin目录下写shell脚本，指向需要执行的文件 记得source","categories":[{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"}],"tags":[{"name":".bashrc","slug":"bashrc","permalink":"http://breadwinners.top/tags/bashrc/"}]},{"title":"Spark安装部署","slug":"Spark安装部署","date":"2023-05-24T16:00:00.000Z","updated":"2023-06-01T07:08:13.866Z","comments":true,"path":"2023/05/25/Spark安装部署/","link":"","permalink":"http://breadwinners.top/2023/05/25/Spark%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","excerpt":"","text":"1.安装Spark将文件上传到&#x2F;opt&#x2F;module&#x2F;，解压并重命名 123wget https://archive.apache.org/dist/spark/spark-3.0.0/spark-3.0.0-bin-hadoop3.2.tgztar -zxvf spark-3.0.0-bin-hadoop3.2.tgzmv spark-3.0.0-bin-hadoop3.2 spark-3.0.0 2.编辑slaves和spark-env.sh文件123cd /opt/module/spark-3.0.0/conf/mv slaves.template slavesmv spark-env.sh.template spark-env.sh 1vi slaves 在文件中添加集群的主机名称 123hadoop102hadoop103hadoop104 1vi spark-env.sh 12导入java地址export JAVA_HOME=/home/jdk1.8.0_77 添加环境变量 1vi /etc/profile 12export SPARK_HOME=/opt/module/spark-3.0.0export PATH=$PATH:$SPARK_HOME/sbin:$SPARK_HOME/bin 每台虚拟机都需要配置 3.分发Spark1xsync /opt/module/spark-3.0.0 4.启动Spark启动spark前需先启动hadoop集群 123cd /opt/module/spark-3.0.0/sbin/start-all.sh jpsall 查看各节点进程：主节点:从节点：浏览器访问web页面：主机名:8080 ok!!","categories":[{"name":"大数据","slug":"大数据","permalink":"http://breadwinners.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"spark","slug":"spark","permalink":"http://breadwinners.top/tags/spark/"}]},{"title":"Spark安装sbt","slug":"spark安装sbt","date":"2023-05-24T16:00:00.000Z","updated":"2023-05-31T11:32:43.087Z","comments":true,"path":"2023/05/25/spark安装sbt/","link":"","permalink":"http://breadwinners.top/2023/05/25/spark%E5%AE%89%E8%A3%85sbt/","excerpt":"","text":"Spark中没有自带sbt，需要[手动安装sbt，我的方法是下载sbt-launch.jar，然后将源改为国内源（aliyun），我选择将sbt安装在&#x2F;usr&#x2F;local&#x2F;sbt中。1234sudo mkdir /usr/local/sbtsudo chown -R hadoop /usr/local/sbt #username is hadoop.cd /usr/local/sbtmkdir sbtlaunch #store sbt-launch.jar 1.下载sbt-launch.jar,并存放至&#x2F;usr&#x2F;local&#x2F;sbt&#x2F;sbtlaunch123cd /usr/local/sbt/sbtlaunchwget https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.9/sbt-launch.jar -O ./sbt-launch.jar #download sbt-launch.jarunzip -q ./sbt-launch.jar #解压 2.需要修改其中的.&#x2F;sbt&#x2F;sbt.boot.properties文件,将[repositories]处修改为如下内容：即增加一条aliyun-nexus的镜像。12cd /usr/local/sbt/sbtlaunchvim ./sbt/sbt.boot.properties 修改为如下123456[repositories] local aliyun-nexus: http://maven.aliyun.com/nexus/content/groups/public/ jcenter: https://jcenter.bintray.com/ typesafe-ivy-releases: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly maven-central 3.删除原来的sbt-launch.文件，然后重新打包12rm ./sbt-launch.jar #delete the old jarjar -cfM ./sbt-launch.jar . #create new jar 4.在&#x2F;usr&#x2F;local&#x2F;sbt目录下创建sbt脚本文件并赋予可执行权限，来执行sbt-launch.jar12cd /usr/lcoal/sbtvim ./sbt #create sbt script 添加如下内容:12SBT_OPTS=&quot;-Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M&quot;java $SBT_OPTS -jar `dirname`/sbt-launch.jar &quot;$@&quot; #dirname为路径名 my dirname ： &#x2F;usr&#x2F;local&#x2F;sbt&#x2F;sbtlaunch5.保存后，为.&#x2F;sbt增加可执行权限:1chmod u+x ./sbt 6.最后检验sbt是否可用1./sbt sbt-version 这一步请耐心等待 参考链接：https://blog.csdn.net/microsoft2014/article/details/54572502","categories":[{"name":"大数据","slug":"大数据","permalink":"http://breadwinners.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"spark","slug":"spark","permalink":"http://breadwinners.top/tags/spark/"},{"name":"sbt","slug":"sbt","permalink":"http://breadwinners.top/tags/sbt/"}]},{"title":"windows安装WSL","slug":"WSL2","date":"2023-05-24T16:00:00.000Z","updated":"2023-06-02T05:11:10.215Z","comments":true,"path":"2023/05/25/WSL2/","link":"","permalink":"http://breadwinners.top/2023/05/25/WSL2/","excerpt":"","text":"Windows下安装wsl 开启系统的一下设置 虚拟化设置 系统设置 ​ 控制面板-&gt;程序-&gt;启用或关闭 windows 功能，开启 Windows 虚拟化和 Linux 子系统（WSL2)以及Hyper-V ​ 勾选完成后，Windows11 会自己下载些东西，并提示你重启。等电脑彻底重启完以后，进行后续操作 打开Power Shell 以管理员身份输入下方代码： bcdedit /set hypervisorlaunchtype auto 安装Ubuntu ​ 微软商店太慢了，这里推荐另一种好方法 ​ 1. 打开Microsoft Store的网页版https://apps.microsoft.com/store/apps ​ 搜索你想要的应用，比如ubuntu 选择一个 复制链接 打开网站https://store.rg-adguard.net，专门下载Microsoft Store上的应用 输入你刚才复制的要下载的应用链接，搜索 在结果里面找到想要的应用，有些文件的名称里面会有平台，比如x64，x86，arm64等等，根据自己电脑的平台下载，注意选择后缀为.appx或者.AppxBundle的下载，.EAppxBundle只适用于Windows Xbox平台。 等待下载完成后 下载完之后进入你的下载目录，运行命令： 1Add-AppxPackage .\\CanonicalGroupLimited.Ubuntu22.04LTS_2204.2.47.0_neutral_~_79rhkp1fndgsc.AppxBundle PS：Add-AppxPackage是power shell命令，在cmd中必须线输入powershell才能继续运行 启动Ubuntu ​ 直接点击ubuntu图标启动 ​ PS：Windows11 WSL 打开Ubuntu 报错 WslRegisterDistribution failed with error: 0x800701bc 这个是需要下载适用于 x64 计算机的 WSL2 Linux 内核更新包： https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi 安装升级后，重新打开 Ubuntu，即可正常访问，效果如下： 修改root用户密码 WSL 默认是没有设置 root 密码的 设置 root 用户密码, 这样要输三次命令, 第一次当前用户密码, 后两次就是设置密码以及确认密码 1sudo passwd root 设置默认用户 查看命令 1ubuntu2204 /? 2. 设置默认登录用户 1ubuntu2204 config --default-user root 重新启动查看结果 ![image-20230602125308631](https://tt-1316429231.cos.ap-nanjing.myqcloud.com/imgs/linux/202306021253674.png)","categories":[{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"}],"tags":[{"name":"wsl","slug":"wsl","permalink":"http://breadwinners.top/tags/wsl/"},{"name":"wsl2","slug":"wsl2","permalink":"http://breadwinners.top/tags/wsl2/"}]},{"title":"CentOs7安装Redis","slug":"linux安装redis","date":"2023-05-22T16:00:00.000Z","updated":"2023-05-23T14:30:39.812Z","comments":true,"path":"2023/05/23/linux安装redis/","link":"","permalink":"http://breadwinners.top/2023/05/23/linux%E5%AE%89%E8%A3%85redis/","excerpt":"","text":"前提条件：Linux装有gcc编译器 ###1. 官网下载redis 1wget http://download.redis.io/releases/redis-5.0.14.tar.gz 2. 安装解压： 123tar -xzvf redis-5.0.14.tar.gzcd redis-5.0.14make PREFIX=/usr/local/redis install //安装 3.使用12redis-server // 启动redis-cli // 连接 输入ping 输出为： 代表安装成功 4.Java远程连接使用需要关闭redis的防远程连接，否则会报错redis运行在protected模式下 找到redis.conf文件 ​ 找到bind 127.0.0.1，注释掉 连接上redis后，输入config get daemonize和config get protected-mode 都修改为no 12config set daemonize noconfig set protected-mode no 在pom文件中添加redis的相关依赖 12345&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt; 实验操作部分： 123456789101112131415161718package redis;import java.util.Map;import redis.clients.jedis.Jedis;public class Redis1 &#123; public static void main(String[] args) &#123; Jedis jedis = new Jedis(&quot;hadoop102&quot;, 6379); jedis.hset(&quot;student.scofield&quot;, &quot;English&quot;, &quot;45&quot;); jedis.hset(&quot;student.scofield&quot;, &quot;Math&quot;, &quot;89&quot;); jedis.hset(&quot;student.scofield&quot;, &quot;Computer&quot;, &quot;100&quot;); Map&lt;String, String&gt; value = jedis.hgetAll(&quot;student.scofield&quot;); for (Map.Entry&lt;String, String&gt; entry : value.entrySet()) &#123; System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue()); &#125; &#125;&#125; 12345678910111213package redis;import redis.clients.jedis.Jedis;public class Redis2 &#123; public static void main(String[] args) &#123; Jedis jedis = new Jedis(&quot;hadoop102&quot;, 6379); String value = jedis.hget(&quot;student.scofield&quot;, &quot;English&quot;); System.out.println(&quot;scofield&#x27;s English score is: &quot; + value); &#125;&#125;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://breadwinners.top/tags/redis/"}]},{"title":"centos设置静态IP","slug":"centos设定静态IP","date":"2023-05-15T16:00:00.000Z","updated":"2023-06-23T08:24:07.367Z","comments":true,"path":"2023/05/16/centos设定静态IP/","link":"","permalink":"http://breadwinners.top/2023/05/16/centos%E8%AE%BE%E5%AE%9A%E9%9D%99%E6%80%81IP/","excerpt":"","text":"配置网卡 1vim /etc/sysconfig/network-scripts/ifcfg-ens33 根据情况输入以下内容 123456789101112131415161718192021TYPE=&quot;Ethernet&quot;PROXY_METHOD=&quot;none&quot;BROWSER_ONLY=&quot;no&quot;BOOTPROTO=&quot;static&quot;DEFROUTE=&quot;yes&quot;IPV4_FAILURE_FATAL=&quot;no&quot;IPV6INIT=&quot;yes&quot;IPV6_AUTOCONF=&quot;yes&quot;IPV6_DEFROUTE=&quot;yes&quot;IPV6_FAILURE_FATAL=&quot;no&quot;IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;NAME=&quot;ens33&quot;UUID=&quot;46cddd88-b100-416c-ab9c-5c19f1e3a7ef&quot;DEVICE=&quot;ens33&quot;ONBOOT=&quot;yes&quot;IPADDR=192.168.153.102GATEWAY=192.168.153.2DNS1=114.114.114.114NETMASK=255.255.255.0","categories":[{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"}],"tags":[{"name":"静态ip","slug":"静态ip","permalink":"http://breadwinners.top/tags/%E9%9D%99%E6%80%81ip/"}]},{"title":"typora+picgo上传图片报错","slug":"typora+picgo图床","date":"2023-05-09T16:00:00.000Z","updated":"2023-05-22T11:42:43.017Z","comments":true,"path":"2023/05/10/typora+picgo图床/","link":"","permalink":"http://breadwinners.top/2023/05/10/typora+picgo%E5%9B%BE%E5%BA%8A/","excerpt":"","text":"error1&quot;success&quot;.false, &quot;message&quot;.&quot;upload error. see C.Users\\lAdministratorlAppDatallRoamingllpicgollpicgo.log for more picgo日志： 1234567891011------Error Stack Begin------Error: read file E:\\Boke\\source\\_posts\\C:\\Users\\wutao\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230521041042868.png error at D:\\application\\tools\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:38189 at async Promise.all (index 0) at async Object.handle (D:\\application\\tools\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:37138) at async $e.doTransform (D:\\application\\tools\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:16679) at async $e.start (D:\\application\\tools\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:15916) at async Tt.upload (D:\\application\\tools\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:71270) at async Object.upload (D:\\application\\tools\\PicGo\\resources\\app.asar\\background.js:2:653584) at async jn (D:\\application\\tools\\PicGo\\resources\\app.asar\\background.js:2:656251) at async D:\\application\\tools\\PicGo\\resources\\app.asar\\background.js:2:657340 解决办法： 直接在hexo的_post文件夹中写markdown会传不上去图片，但是在外面写可以正常上传图片，所以可以在外面写好了在放信hexo中","categories":[{"name":"bugs","slug":"bugs","permalink":"http://breadwinners.top/categories/bugs/"}],"tags":[{"name":"picgo","slug":"picgo","permalink":"http://breadwinners.top/tags/picgo/"}]},{"title":"nginx绑定子域名","slug":"nginx绑定子域名","date":"2023-05-04T16:00:00.000Z","updated":"2023-05-22T13:01:22.125Z","comments":true,"path":"2023/05/05/nginx绑定子域名/","link":"","permalink":"http://breadwinners.top/2023/05/05/nginx%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D/","excerpt":"","text":"检查 nginx 配置文件路径（重要）注意：这一步非常关键，如果修改了错误的 nginx 配置文件，将导致所有修改均无效，甚至会让您在探索了数个小时后仍无法得知修改无效的原因是什么。 使用命令 1$ nginx -V 来查看 nginx 的一些配置信息，如下（您的和博主的显示内容可能不同，不影响）： 12345nginx version: nginx/1.12.2built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)built with OpenSSL 1.0.2k-fips 26 Jan 2017TLS SNI support enabledconfigure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_auth_request_module --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-google_perftools_module --with-debug --with-cc-opt=&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27; --with-ld-opt=&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27; 其中只需要关注到 --conf-path=/etc/nginx/nginx.conf 这个条目，这个条目指明了当前 nginx 的程序使用的默认配置文件。 新建一个站点配置文件根据上面的配置文件路径，首先切换目录到 nginx 的配置路径下： 1$ cd /etc/nginx 然后新建一个站点配置文件，建议放置在 nginx 配置目录下的 vhost 目录内，如果您当前没有此目录，可新建一个： 12345678$ pwd/etc/nginx$ sudo mkdir vhost$ lsconf.d fastcgi_params mime.types scgi_params vhostdefault.d fastcgi_params.default mime.types.default scgi_params.default win-utffastcgi.conf koi-utf nginx.conf uwsgi_paramsfastcgi.conf.default koi-win nginx.conf.default uwsgi_params.default 注意：/etc 是系统目录，一般用户不具有修改权限，需要使用 sudo 以管理员权限在该目录中进行修改，如创建、修改文件，创建文件夹等操作。 进入刚刚创建的 vhost 目录，新建一个配置文件，例如 mysite.conf，该配置文件文件名无限制，最好是你的网站名称之类的，便于辨认，但一定是以 .conf 为后缀。 12345678$ pwd/etc/nginx$ cd vhost/$ pwd/etc/nginx/vhost$ sudo touch mysite.conf$ lsmysite.conf trans.conf 其中，touch 命令创建了一个名为 mysite.conf 的配置文件（空文件），是本文中要介绍的配置文件，另一个是博主正在运行的网站，无需在意。 修改网站配置文件信息本文中将建立一个名为 mysite 的网站，网站根目录为 /home/www/mysite，网站绑定域名 mysite.jinhangdev.cn。 使用任意文字编辑器打开 mysite.conf，输入如下内容并保存（注意需管理员权限）： 1234567server &#123; listen 80; # 网站的端口一般为 80，可以与其他网站一起使用该端口 server_name mysite.jinhangdev.cn; # 要绑定的域名（或子域名） root /home/www/mysite; # 该网站的根目录 location / &#123; # 不用管 &#125;&#125; 以上内容为一个 server 的内容，下面讲 nginx.conf 配置的时候会再区分把一行配置写在 server 或写在 server 外的区别。 12345678910111213$ pwd/etc/nginx/vhost$ lsmysite.conf trans.conf$ sudo vim mysite.conf$ cat mysite.confserver &#123; listen 80; server_name mysite.jinhangdev.cn; root /home/www/mysite; location /&#123; &#125;&#125; 上面我们已经新建好了一个网站，该网站使用服务器的 80 端口，绑定的域名为 mysite.jinhangdev.cn，网站根目录使用 /home/www/mysite。 修改 nginx 配置文件下面对关键文件 nginx.conf 进行配置，建议在修改前先备份，养成好的习惯： 123$ pwd/etc/nginx$ sudo cp nginx.conf nginx.conf.bak 将原有配置存储到 nginx.conf.bak 后，继续下面操作，若后面发现修改出错，可将 nginx.conf.bak 改名回 nginx.conf 使用。 以超级用户权限使用文本编辑器打开 nginx.conf： 1$ sudo vim nginx.conf 并进行编辑。 Nginx 配置文件的结构我们这里只介绍和配置域名绑定相关的部分结构，即 http 小节： 123http &#123; （各种配置）&#125; 设置在此处的配置都是 http 的全局配置，如果要对某个网站单独配置，则需要对每个 server 分别设置： 12345678910http &#123; (此处的配置是全局的配置参数) server &#123; (此处的配置是本 server 的配置参数) &#125; server &#123; (此处的配置是本 server 的配置参数) &#125; (此处的配置是全局的配置参数)&#125; 但是我们并不提倡把所有 server 都展开写在 nginx.conf 中，因此我们使用一句 include 语句，把 vhost 下所有网站的配置都引用进来。注意：include 命令只是简单地进行文本替换。 于是我们在 nginx.conf 的 http 节内部的末尾写上一句： 1234http &#123; （前面的若干配置） include /etc/nginx/vhost/*.conf;&#125; 这样一来，vhost 下的所有 .conf 文件均被文本替换式地引入到 nginx.conf 里面了。 重启 nginx 服务","categories":[{"name":"论文","slug":"论文","permalink":"http://breadwinners.top/categories/%E8%AE%BA%E6%96%87/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://breadwinners.top/tags/nginx/"}]},{"title":"暴力和模拟","slug":"暴力和模拟","date":"2023-05-02T16:00:00.000Z","updated":"2023-05-22T11:59:54.888Z","comments":true,"path":"2023/05/03/暴力和模拟/","link":"","permalink":"http://breadwinners.top/2023/05/03/%E6%9A%B4%E5%8A%9B%E5%92%8C%E6%A8%A1%E6%8B%9F/","excerpt":"","text":"四方和定理 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N = 5e6 + 10;int n;int h[N * 2]; // 小技巧，避免pair，r[c^2+d^2]=c;可以推导出dint main() &#123; cin &gt;&gt; n; memset(h, -1, sizeof h); for (int c = 0; c * c &lt;= n; c++) &#123; for (int d = c; c * c + d * d &lt;= n; d++) &#123; // 必须要更严格的判断条件，c * c + d * d &lt;= n,否则会出意外 int s = c * c + d * d; if (h[s] == -1) &#123; h[s] = c; &#125; &#125; &#125; for (int a = 0; a * a &lt;= n; a++) &#123; for (int b = a; a * a + b * b &lt;= n; b++) &#123; // 必须要更严格的判断条件，a * a+ b * b &lt;= n,否则会出意外 int s = n - a * a - b * b; if (h[s] != -1) &#123; int d = sqrt(s - h[s] * h[s]); printf(&quot;%d %d %d %d\\n&quot;, a, b, h[s], d); return 0; &#125; &#125; &#125; return 0;&#125; 连号区间数 123456789101112131415161718192021222324252627282930313233#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;const int N = 10010;int a[N], tmp[N];int n, cnt = 0;int main() &#123; // https://www.acwing.com/problem/content/1212/ cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; n; i++) &#123; int mav = -1; int miv = 10009; for (int j = i; j &lt; n; j++) &#123; mav = max(mav, a[j]); miv = min(miv, a[j]); if (mav - miv == j - i) &#123; cnt++; &#125; &#125; &#125; cout &lt;&lt; cnt; return 0;&#125; 回文日期 &#x3D;&#x3D;注意&#x3D;&#x3D; 这个题目中有两个枚举的角度，一个是 符合回文数的范围要求，另一个是 符合日期的要求，很容易会想到开始枚举日期，然后想是否满足回文数，但是这种枚举方法很麻烦，可能需要自己写个日历。所以换一个角度，先枚举回文数，再判断是否满足日期的要求，就简单很多，注意getline之前要吸收回车 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;int date1, date2, res = 0;int days[13] = &#123;0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;bool check(int date) &#123; // 判断回文数中的月份是否合法 int year, month, day; year = date / 10000; month = date / 100 % 100; day = date % 100; cout &lt;&lt; year &lt;&lt; &quot; &quot; &lt;&lt; month &lt;&lt; &quot; &quot; &lt;&lt; day &lt;&lt; &quot;##\\n&quot;; if (month &lt;= 0 || month &gt; 12) return false; if (day &lt;= 0 || day &gt; days[month] &amp;&amp; month != 2) return false; if (month == 2) &#123; int leap = (year % 400 == 0 || year % 4 == 0 &amp;&amp; year % 100 != 0); if (day &gt; days[month] + leap) return false; &#125; return true;&#125;int main() &#123; // https://www.acwing.com/problem/content/468/ cin &gt;&gt; date1 &gt;&gt; date2; // 首先枚举回文数，只需枚举前面4位数 for (int i = 1000; i &lt; 10000; i++) &#123; int date = i, x = i; while (x) &#123; // 通过前4位数构造回文数 date *= 10; int t = x % 10; date += t; x /= 10; &#125; cout &lt;&lt; date &lt;&lt; endl; if (check(date) &amp;&amp; date &gt;= date1 &amp;&amp; date &lt;= date2) res++; &#125; cout &lt;&lt; res; return 0;&#125; 递增三元组 双指针&#x3D;&#x3D;注意&#x3D;&#x3D; while 循环的指针，一定要判断指针不出界才继续循环 递增三元组 思路：枚举数组B，A， C数组从开头出发，满足 A &lt; B &lt; C，res++ 12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;const int N = 1e5 + 10;int n;int a[N], b[N], c[N];signed main() &#123; // https://www.acwing.com/problem/content/description/1238/ cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;a[i]); for (int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;b[i]); for (int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;c[i]); sort(a, a + n); sort(b, b + n); sort(c, c + n); LL res = 0, l = 0, r = 0; // l 和 r定义在外面，因为数组排序过后，顺序是固定的，没必要从头开始查找 for (int i = 0; i &lt; n; i++) &#123; while (a[l] &lt; b[i] &amp;&amp; l &lt; n) l++; while (c[r] &lt;= b[i] &amp;&amp; r &lt; n) r++; res += (LL)l * (n - r); &#125; cout &lt;&lt; res &lt;&lt; endl;&#125; 前缀和思路：定义一个数组cnta，cnta[i] 是A中小于i的数的个数，cntc[i] 是C中大于i的数的个数，然后循环遍历数组B，res +&#x3D; A中小于B[i]的数量 × C中大于B[i]的数量 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;typedef long long LL;const int N = 100010;int A[N], B[N], C[N];int cnta[N], cntc[N]; // cnta[i] 是A中小于i的数的个数, cntc[i] 是C中大于i的数的个数int main() &#123; int n; cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) &#123; scanf(&quot;%d&quot;, &amp;A[i]); cnta[A[i]]++; &#125; for (int i = 1; i &lt;= n; i++) &#123; scanf(&quot;%d&quot;, &amp;B[i]); &#125; for (int i = 1; i &lt;= n; i++) &#123; scanf(&quot;%d&quot;, &amp;C[i]); cntc[C[i]]++; &#125; // 对数出现的次数，求一次前缀和 // 预处理前缀和 for (int i = 1; i &lt;= N; i++) &#123; // 前缀和的迭代次数不是 n, 而是题中出现的数的最大值 cnta[i] += cnta[i - 1]; &#125; for (int i = N; i &gt;= 1; i--) &#123; // 这里还需要注意前缀和的后缀和 cntc[i] += cntc[i + 1]; &#125; // 开始计算res LL res = 0; for (int i = 1; i &lt;= n; i++) &#123; res += (LL)cnta[B[i] - 1] * cntc[B[i] + 1]; &#125; cout &lt;&lt; res &lt;&lt; endl; return 0;&#125; 错误票据（考察数据读取）某涉密单位下发了某种票据，并要在年终全部收回。 每张票据有唯一的ID号。 全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。 因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。 你的任务是通过编程，找出断号的ID和重号的ID。 假设断号不可能发生在最大和最小号。 输入格式 第一行包含整数 N，表示后面共有 N 行数据。 接下来 N 行，每行包含空格分开的若干个（不大于100个）正整数（不大于100000），每个整数代表一个ID号。 输出格式 要求程序输出1行，含两个整数 m,n用空格分隔。 其中，m表示断号ID，n表示重号ID。 数据范围 1≤N≤100 输入样例：12325 6 8 11 9 10 12 9 输出样例： 17 9 可以使用stringstream&#x3D;&#x3D;注意&#x3D;&#x3D; getline之前必须处理掉多余的换行符\\n 12345678910111213141516171819202122232425262728293031323334353637#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;sstream&gt;using namespace std;const int N = 10010;int a[N];int main() &#123; // https://www.acwing.com/problem/content/1206/ int n, cnt = 0; cin &gt;&gt; n; string line; getline(cin, line); while (n--) &#123; getline(cin, line); stringstream ssin(line); while (ssin &gt;&gt; a[cnt]) cnt++; &#125; sort(a, a + cnt); // for (int i = 0;i &lt;cnt;i++) // cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;; int res1, res2; for (int i = 1; i &lt; cnt; i++) &#123; if (a[i] == a[i - 1]) res1 = a[i]; else if (a[i] - a[i - 1] &gt; 1) res2 = a[i - 1] + 1; &#125; cout &lt;&lt; res2 &lt;&lt; &quot; &quot; &lt;&lt; res1; return 0;&#125; 直接忽略第一个数，读取到EOF123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;int n;const int N = 1e5 + 10;int a[N];int main() &#123; // https://www.acwing.com/problem/content/1206/ cin &gt;&gt; n; int i = 0; while (cin &gt;&gt; a[i]) &#123; i++; &#125; sort(a, a + i); int duan, chong; for (int j = 0; j &lt; i; j++) &#123; if (a[j] == a[j + 1]) chong = a[j]; if (a[j] == a[j + 1] - 2) duan = a[j] + 1; &#125; cout &lt;&lt; duan &lt;&lt; &#x27; &#x27;; cout &lt;&lt; chong &lt;&lt; &#x27; &#x27;;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://breadwinners.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://breadwinners.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"李沐说读论文","slug":"李沐读论文","date":"2023-05-02T16:00:00.000Z","updated":"2023-05-02T16:18:51.776Z","comments":true,"path":"2023/05/03/李沐读论文/","link":"","permalink":"http://breadwinners.top/2023/05/03/%E6%9D%8E%E6%B2%90%E8%AF%BB%E8%AE%BA%E6%96%87/","excerpt":"","text":"title abstract introduction method experiments conclusion 第一遍：标题、摘要、结论。可以看一看方法和实验部分重要的图和表。这样可以花费十几分钟时间了解到论文是否适合你的研究方向。第二遍：确定论文值得读之后，可以快速的把整个论文过一遍，不需要知道所有的细节，需要了解重要的图和表，知道每一个部分在干什么，圈出相关文献。觉得文章太难，可以读引用的文献。第三遍：提出什么问题，用什么方法来解决这个问题。实验是怎么做的。合上文章，回忆每一个部分在讲什么。","categories":[{"name":"论文","slug":"论文","permalink":"http://breadwinners.top/categories/%E8%AE%BA%E6%96%87/"},{"name":"算法","slug":"论文/算法","permalink":"http://breadwinners.top/categories/%E8%AE%BA%E6%96%87/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"论文","slug":"论文","permalink":"http://breadwinners.top/tags/%E8%AE%BA%E6%96%87/"}]},{"title":"centos7安装Mysql初始密码问题","slug":"centos7安装Mysql初始密码问题","date":"2023-05-02T16:00:00.000Z","updated":"2023-05-20T21:13:30.249Z","comments":true,"path":"2023/05/03/centos7安装Mysql初始密码问题/","link":"","permalink":"http://breadwinners.top/2023/05/03/centos7%E5%AE%89%E8%A3%85Mysql%E5%88%9D%E5%A7%8B%E5%AF%86%E7%A0%81%E9%97%AE%E9%A2%98/","excerpt":"","text":"一般来说，centos7暗转MySQL，可以直接使用yum -y install mysql来实现，但是突然碰到了不知道初始root密码的问题，记录一下解决过程 网上都会说grep ‘temporary password’ /var/log/mysqld.log就可以查看临时密码，但是系统却说 No such file of directory 解决方法 查看是否安装了mysql服务（有则自行卸载删除）。 12yum list installed mysql* rpm –qa|grep mysql* 查看服务器上是否有现成的安装包。 1yum list mysql* 去mysql官网的yum资源库找到对应的rpm文件的下载链接 在linux中下载、安装yum资源。 1rpm -ivh 资源下载链接(https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm) 查看当前mysql的当前版本 1yum info mysql-community-server 安装mysql 1yum -y install mysql-community-server 注：如果出现 原因是Mysql的GPG升级了，需要重新获取 1rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 MySQL安装完成如下： 安装完成后，启动MySQL 12systemctl start mysqldsystemctl status mysqld // 检查MySQL状态 查询mysql初始密码 1grep ‘temporary password’ /var/log/mysqld.log 修改密码 1mysqladmin -u root -p password Access denied for user ‘root‘@’localhost’ (using password: YES)报错 1、关闭mysql服务 service mysqld stop 2、找到&#x2F;etc&#x2F;my.cnf ,在最后一行添加skip-grant-tables（用于免密码登录） vim &#x2F;etc&#x2F;my.cnf 3、重启mysql服务 service mysqld start 4、正常登录mysql（不使用密码） mysql -u root 123456789mysql&gt; show databases;mysql&gt; use mysql;mysql&gt; ALTER USER &#x27;用户名&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;mysql&gt; flush privileges; --刷新MySQL的系统权限相关表mysql&gt; exit; 5、找到&#x2F;etc&#x2F;my.cnf ,删除skip-grant-table6、重启mysql服务service mysqld restart7、正常登录测试mysql -u root -p 就可以了 备注：root账号一般只添加了localhost访问(这是推荐的)，如若调试阶段不想通过ssh跳板连接，建议开个新账号。 步骤1：查看root账号的ip访问权限（执行结果：localhost和127.0.0.1，是无法从外部连接的） 1select user,host,plugin from user; 1SELECT host FROM mysql.user WHERE User = &#x27;root&#x27;; 步骤2：新建账号并指定密码和ip（使用 % 通配符表示允许任何ip访问） 1CREATE USER &#x27;my_name&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;my_password&#x27;;GRANT ALL PRIVILEGES ON *.* TO &#x27;my_name&#x27;@&#x27;%&#x27;; 步骤3：刷新配置 1FLUSH PRIVILEGES; 这样my_name就可以不通过ssh跳板直接连接了。","categories":[{"name":"bugs","slug":"bugs","permalink":"http://breadwinners.top/categories/bugs/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://breadwinners.top/tags/mysql/"}]},{"title":"部署hexo到CentOs7","slug":"部署hexo到centos","date":"2023-05-02T16:00:00.000Z","updated":"2023-05-22T12:00:55.155Z","comments":true,"path":"2023/05/03/部署hexo到centos/","link":"","permalink":"http://breadwinners.top/2023/05/03/%E9%83%A8%E7%BD%B2hexo%E5%88%B0centos/","excerpt":"","text":"git 安装 1yum install git 测试 1git --version 输出类似下面的结果则表示安装成功 1git version 1.8.3.1 创建 git 用户 1adduser git 建立裸仓 12345su gitcd /home/git # 进入 git 用户目录mkdir blog &amp;&amp; chown -R git:git &amp;&amp; cd git# 创建博客文件夹，，设置权限,作为 nginx web 目录mkdir projects &amp;&amp; chown -R git:git &amp;&amp; cd project # 创建项目目录，设置权限并进入git init --bare hexo.git &amp;&amp; chown -R git:git # 创建博客裸仓，设置权限 添加 SSH Key，通过 ssh 链接仓库 12cd /home/git # 回到 git 用户目录mkdir .ssh # 存放 ssh key 在本地机器（写博客的电脑）上创建的 ssh 公钥（已有请忽略） 1ssh-keygen -o -t rsa -b 4096 -C &quot;email@example.com&quot; # 替换邮箱 复制公钥 1pbcopy &lt; ~/.ssh/id_rsa.pub 在远程服务器，使用 vim 编辑文件，vim 用法请参考： 1vi /home/git/.ssh/authorized_keys 按 i 进入编辑模式，粘贴公钥，按 esc，输入 :wq 保存并退出。 hexo 配置发布选项 修改 _config.yml （本级 hexo 配置文件） 1234deploy: type: git repo: git@ip:/home/git/projects/hexo.git # ip 为服务器ip branch: master 自动部署（服务器） 123cd /home/git/projects/hexo.git/hooks # 进入 hook 目录mv post-update.sample post-update # 重命名 post-updatevi post-update # vim 进行编辑 按 i 进入编辑模式，在最后一行上面粘贴下面文字，按 esc，输入 :wq 保存并退出。 1git --work-tree=/home/git/blog --git-dir=/home/git/projects/hexo.git checkout -f 在本地 hexo 目录执行发布命令 1hexo g -d 查看服务器 blog 目录中是否有文件，如果没有请检查步骤是否错误。 源代码存放 在我们服务器上存放的是编译后的文件，源文件我建议存放在 github 私有仓库。 nginx以 centos 为例： 安装 1yum install -y nginx 启动 1service nginx start 测试 1wget http://127.0.0.1 可以正常下载 index.html 文件则说明启动成功。 配置 1vi /etc/nginx/nginx.conf 把 user nginx 修改为user root， server 按照修改两处配置： 1234root /home/git/blog;location / &#123; index index.html;&#125; 重启 nginx 1service nginx restart 在浏览器键入你的服务器 ip 地址或域名，即可正常访问。 https使用 certbot 自动获取证书，参考 https://certbot.eff.org/ 安装 Certbot 1sudo yum install certbot python2-certbot-nginx 获取证书并自动配置 1sudo certbot --nginx 按照提示输入即可 自动续签 1echo &quot;0 0,12 * * * root python -c &#x27;import random; import time; time.sleep(random.random() * 3600)&#x27; &amp;&amp; certbot renew -q&quot; | sudo tee -a /etc/crontab &gt; /dev/null 结束","categories":[],"tags":[]},{"title":"解决切换用户出现bash-4.2$问题","slug":"解决Linux用户出现bash-4.2$问题","date":"2023-05-02T16:00:00.000Z","updated":"2023-06-13T15:32:49.979Z","comments":true,"path":"2023/05/03/解决Linux用户出现bash-4.2$问题/","link":"","permalink":"http://breadwinners.top/2023/05/03/%E8%A7%A3%E5%86%B3Linux%E7%94%A8%E6%88%B7%E5%87%BA%E7%8E%B0bash-4.2$%E9%97%AE%E9%A2%98/","excerpt":"","text":"##【问题描述】 linux中创建了一个xhh用户，然后使用su命令切换用户后，终端提示符显示成“bash-4.2$”而不是[root@localhost xhh]#，导致ll等命令无法执行。 123[root@localhost hadoop] # su hadoopbash-4.2$ llbash: ll: 未找到命令 【原因】没有在home目录下创建对应的目录导致。 【解决方法】使用root用户登录，再home目录中创建用户对应的文件夹，mkdir &#x2F;home&#x2F;user，这里的user是用户的名字，然后执行如下两个命令： 12cp /etc/skel/.bashrc /home/hadoopcp /etc/skel/.bash_profile /home/hadoop 执行成功后，再次使用su命令切换用户，发现一切正常。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"}],"tags":[{"name":"bash-4.2$","slug":"bash-4-2","permalink":"http://breadwinners.top/tags/bash-4-2/"}]},{"title":"标题模板","slug":"test","date":"2023-05-01T02:08:40.150Z","updated":"2023-05-02T16:18:26.746Z","comments":true,"path":"2023/05/01/test/","link":"","permalink":"http://breadwinners.top/2023/05/01/test/","excerpt":"","text":"1hexo g -d This is a video test post. Youtube Vimeo Headers1234567891011121314# H1## H2### H3#### H4##### H5###### H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1======Alt-H2------ H1H2H3H4H5H6Alternatively, for H1 and H2, an underline-ish style: Alt-H1Alt-H2Emphasis","categories":[{"name":"分类","slug":"分类","permalink":"http://breadwinners.top/categories/%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"标签名","slug":"标签名","permalink":"http://breadwinners.top/tags/%E6%A0%87%E7%AD%BE%E5%90%8D/"}]},{"title":"Markdown Style test","slug":"markdown","date":"2018-07-24T15:31:06.000Z","updated":"2023-05-02T16:18:22.929Z","comments":true,"path":"2018/07/24/markdown/","link":"","permalink":"http://breadwinners.top/2018/07/24/markdown/","excerpt":"This post is originated from here and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly.","text":"This post is originated from here and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://breadwinners.top/tags/test/"}]},{"title":"Tag Plugins","slug":"tag-plugins","date":"2013-12-24T16:14:39.000Z","updated":"2023-04-30T06:59:49.462Z","comments":true,"path":"2013/12/25/tag-plugins/","link":"","permalink":"http://breadwinners.top/2013/12/25/tag-plugins/","excerpt":"","text":"This post is used for testing tag plugins. See docs for more info. Block QuoteNormal blockquote Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna. Quote from a bookDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake Quote from TwitterNEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Quote from an article on the webEvery interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Code BlockNormal code block1alert(&#x27;Hello World!&#x27;); With captionArray.map1array.map(callback[, thisArg]) With caption and URL.compactUnderscore.js12.compact([0, 1, false, 2, ‘’, 3]);=&gt; [1, 2, 3] With marked linesLine 1,7-8,10 should be marked with different color. 1234567891011const http = require(&#x27;http&#x27;);const hostname = &#x27;127.0.0.1&#x27;;const port = 1337;http.createServer((req, res) =&gt; &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; &#125;); res.end(&#x27;Hello World\\n&#x27;);&#125;).listen(port, hostname, () =&gt; &#123; console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);&#125;); Note: Theme’s style should support .highlight.line.marked (recommend to use the selection or current line color). Gist jsFiddle PullquoteLeftLorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas tempus molestie arcu, et fringilla mauris placerat ac. Nullam luctus bibendum risus. Ut cursus sed ipsum feugiat egestas. Suspendisse elementum, velit eu consequat consequat, augue lorem dapibus libero, eget pulvinar dolor est sit amet nulla. Suspendisse a porta tortor, et posuere mi. Pellentesque ultricies, mi quis volutpat malesuada, erat felis vulputate nisl, ac congue ante tortor ut ante. Proin aliquam sem vel mauris tincidunt, eget scelerisque tortor euismod. Nulla tincidunt enim nec commodo dictum. Mauris id sapien et orci gravida luctus id ut dui. In vel vulputate odio. Duis vel turpis molestie, scelerisque enim eu, lobortis eros. Cras at ipsum gravida, sagittis ante vel, viverra tellus. Nunc mauris turpis, elementum ullamcorper nisl pretium, ultrices cursus justo. Mauris porttitor commodo eros, ac ornare orci interdum in. Cras fermentum cursus leo sed mattis. In dignissim lorem sem, sit amet elementum mauris venenatis ac. RightLorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ligula justo, lobortis sit amet semper vel, dignissim sit amet libero. Praesent ac tempus ligula. Maecenas at gravida odio. Etiam tristique volutpat lacus eu faucibus. Donec non tempus arcu. Phasellus adipiscing, mauris nec mollis egestas, ipsum nunc auctor velit, et rhoncus lorem ipsum at ante. Praesent et sem in velit volutpat auctor. Duis vel mauris nulla. Maecenas mattis interdum ante, quis sagittis nibh cursus et. Nulla facilisi. Morbi convallis gravida tortor, ut fermentum enim gravida et. Nunc vel dictum nisl, non ultrices libero. Proin vestibulum felis eget orci consectetur lobortis. Vestibulum augue nulla, iaculis vitae augue vehicula, dignissim ultrices libero. Sed imperdiet urna et quam ultrices tincidunt nec ac magna. Etiam vel pharetra elit.","categories":[],"tags":[]},{"title":"sufingkeys常用使用说明","slug":"sufingkeys常用使用说明","date":"2013-12-24T15:30:09.000Z","updated":"2023-04-30T15:56:48.626Z","comments":true,"path":"2013/12/24/sufingkeys常用使用说明/","link":"","permalink":"http://breadwinners.top/2013/12/24/sufingkeys%E5%B8%B8%E7%94%A8%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","excerpt":"","text":"normal模式 插入模式 j 向下混动 k 向上滚动 h 向左滚动 l 向右滚动 gg 定位到顶部 G 定位到底部 空格 快速翻页 &#x2F; 搜索页面内容 Ctrl+L Alt+d 光标定位到地址栏 gi 光标定位到搜索框 gf 在新标签页后台打开链接 f 展示页面中所有可以点击的链接，输入相应的字母回车进行跳转 x 关闭当前标签 X 恢复上一个关闭的标签 E 跳到左侧标签 R 跳到右侧标签 yt 复制当前标签页 yy 复制当前地址 yg 截屏 T 快速切换标签 b 搜索书签打开 n 下一处 N 上一处 on 打开新标签 zi 放大 zo 缩小 oh 打开搜索栏查找访问历史 ob 打开百度搜索栏og 打开谷歌搜索栏ow 打开必应搜索栏 sg 用谷歌搜索选中文本 sb 用百度搜索选中文本 sw 用必应搜索选中文本 ss 用stackoverflow搜索选中文本 sh 用github搜索选中文本 gd 打开下载 gh 打开历史记录 cc 打开选中的网址或系统剪贴板里的网址 了解vim的编辑方式 某些网站禁用surfingkeys Alt + s surfingkeys Blacklist","categories":[{"name":"use","slug":"use","permalink":"http://breadwinners.top/categories/use/"}],"tags":[{"name":"浏览器插件","slug":"浏览器插件","permalink":"http://breadwinners.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"}]}],"categories":[{"name":"小技巧","slug":"小技巧","permalink":"http://breadwinners.top/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"大数据","slug":"大数据","permalink":"http://breadwinners.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://breadwinners.top/categories/Linux/"},{"name":"bugs","slug":"bugs","permalink":"http://breadwinners.top/categories/bugs/"},{"name":"论文","slug":"论文","permalink":"http://breadwinners.top/categories/%E8%AE%BA%E6%96%87/"},{"name":"算法","slug":"算法","permalink":"http://breadwinners.top/categories/%E7%AE%97%E6%B3%95/"},{"name":"算法","slug":"论文/算法","permalink":"http://breadwinners.top/categories/%E8%AE%BA%E6%96%87/%E7%AE%97%E6%B3%95/"},{"name":"分类","slug":"分类","permalink":"http://breadwinners.top/categories/%E5%88%86%E7%B1%BB/"},{"name":"use","slug":"use","permalink":"http://breadwinners.top/categories/use/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://breadwinners.top/tags/maven/"},{"name":"打包依赖","slug":"打包依赖","permalink":"http://breadwinners.top/tags/%E6%89%93%E5%8C%85%E4%BE%9D%E8%B5%96/"},{"name":"flume","slug":"flume","permalink":"http://breadwinners.top/tags/flume/"},{"name":"bin目录","slug":"bin目录","permalink":"http://breadwinners.top/tags/bin%E7%9B%AE%E5%BD%95/"},{"name":".bashrc","slug":"bashrc","permalink":"http://breadwinners.top/tags/bashrc/"},{"name":"spark","slug":"spark","permalink":"http://breadwinners.top/tags/spark/"},{"name":"sbt","slug":"sbt","permalink":"http://breadwinners.top/tags/sbt/"},{"name":"wsl","slug":"wsl","permalink":"http://breadwinners.top/tags/wsl/"},{"name":"wsl2","slug":"wsl2","permalink":"http://breadwinners.top/tags/wsl2/"},{"name":"redis","slug":"redis","permalink":"http://breadwinners.top/tags/redis/"},{"name":"静态ip","slug":"静态ip","permalink":"http://breadwinners.top/tags/%E9%9D%99%E6%80%81ip/"},{"name":"picgo","slug":"picgo","permalink":"http://breadwinners.top/tags/picgo/"},{"name":"nginx","slug":"nginx","permalink":"http://breadwinners.top/tags/nginx/"},{"name":"算法","slug":"算法","permalink":"http://breadwinners.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"论文","slug":"论文","permalink":"http://breadwinners.top/tags/%E8%AE%BA%E6%96%87/"},{"name":"mysql","slug":"mysql","permalink":"http://breadwinners.top/tags/mysql/"},{"name":"bash-4.2$","slug":"bash-4-2","permalink":"http://breadwinners.top/tags/bash-4-2/"},{"name":"标签名","slug":"标签名","permalink":"http://breadwinners.top/tags/%E6%A0%87%E7%AD%BE%E5%90%8D/"},{"name":"test","slug":"test","permalink":"http://breadwinners.top/tags/test/"},{"name":"浏览器插件","slug":"浏览器插件","permalink":"http://breadwinners.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"}]}